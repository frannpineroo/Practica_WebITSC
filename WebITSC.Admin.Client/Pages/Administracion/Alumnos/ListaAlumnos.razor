@page "/lista-alumnos"
@using WebITSC.Shared.General.DTO.Alumnos
@using WebITSC.Shared.General.DTO.BuscarAlumnosDTOs
@using WebITSC.Shared.General.DTO.Carreraa
@inject HttpClient http
@inject NavigationManager Navigation

<h3>Lista de Alumnos</h3>

<!-- Filtros de búsqueda -->
<div class="form-group">
    <label for="search">Buscar</label>
    <InputText class="form-control" id="search" @bind-Value="searchTerm" placeholder="Buscar por nombre, apellido, documento, etc..." />
</div>

<div class="form-group">
    <label for="carreraFilter">Filtrar por Carrera</label>
    <InputSelect class="form-control" id="carreraFilter" @bind-Value="selectedCarrera">
        <option value="">Seleccione una carrera</option>
        @foreach (var carrera in availableCarreras)
        {
            <option value="@carrera.Id">@carrera.Nombre</option>
        }
    </InputSelect>
</div>

<div class="form-group">
    <label for="cohorteFilter">Filtrar por Cohorte</label>
    <InputNumber class="form-control" id="cohorteFilter" @bind-Value="selectedCohorte" />
</div>

<!-- Tabla de Alumnos -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Carrera</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Documento</th>
            <th>Cohorte</th>
            <th>CUIL</th>
            <th>País</th>
            <th>Provincia</th>
            <th>Departamento</th>
            <th>Título Base</th>
            <th>Fotocopia DNI</th>
            <th>Constancia CUIL</th>
            <th>Partida de Nacimiento</th>
            <th>Analítico</th>
            <th>Foto Carnet</th>
            <th>CUS</th>
            <th>Estado</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var alumno in FilteredAlumnos)
        {
            <tr>
                <td>@alumno.InscripcionesEnCarreras.FirstOrDefault()?.NombreCarrera</td>
                <td>@alumno.Nombre</td>
                <td>@alumno.Apellido</td>
                <td>@alumno.Documento</td>
                <td>@(alumno.InscripcionesEnCarreras.FirstOrDefault()?.Cohorte.ToString() ?? "Sin cohorte")</td>
                <td>@alumno.Cuil</td>
                <td>@alumno.Pais</td>
                <td>@alumno.Provincia</td>
                <td>@alumno.Departamento</td>
                <td>@alumno.TituloBase</td>
                <td>@alumno.FotocopiaDNI</td>
                <td>@alumno.ConstanciaCUIL</td>
                <td>@alumno.PartidaNacimiento</td>
                <td>@alumno.Analitico</td>
                <td>@alumno.FotoCarnet</td>
                <td>@alumno.Cus</td>
                <td>@(alumno.EstadoAlumno ? "Activo" : "Inactivo")</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<BuscarAlumnoDTO> alumnos = new List<BuscarAlumnoDTO>();
    private List<GetCarreraDTO> availableCarreras = new List<GetCarreraDTO>(); // Carreras obtenidas del backend
    private string selectedCarrera = string.Empty;  // Carrera seleccionada
    private int? selectedCohorte = null;  // Cohorte seleccionado
    private string searchTerm = string.Empty;

    // Propiedad calculada para obtener los alumnos filtrados
    private IEnumerable<BuscarAlumnoDTO> FilteredAlumnos
    {
        get
        {
            var filtered = alumnos.AsEnumerable();

            // Filtrar por el término de búsqueda
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                filtered = filtered.Where(a =>
                    a.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    a.Apellido.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    a.Documento.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            }

            // Filtrar por Carrera seleccionada
            if (!string.IsNullOrWhiteSpace(selectedCarrera))
            {
                filtered = filtered.Where(a => a.InscripcionesEnCarreras
                    .Any(ic => ic.NombreCarrera.Contains(selectedCarrera, StringComparison.OrdinalIgnoreCase)));
            }

            // Filtrar por Cohorte seleccionado
            if (selectedCohorte.HasValue)
            {
                filtered = filtered.Where(a => a.InscripcionesEnCarreras
                    .Any(ic => ic.Cohorte == selectedCohorte.Value));
            }

            return filtered;
        }
    }

    // Este método se ejecuta al cargar la página
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtener la lista de alumnos del API
            alumnos = await http.GetFromJsonAsync<List<BuscarAlumnoDTO>>("api/alumnos/buscar");

            // Obtener las carreras disponibles del API
            availableCarreras = await http.GetFromJsonAsync<List<GetCarreraDTO>>("api/carreras");

            // Si no obtenemos datos, asignamos una lista vacía
            if (alumnos == null)
            {
                alumnos = new List<BuscarAlumnoDTO>();
            }
            if (availableCarreras == null)
            {
                availableCarreras = new List<GetCarreraDTO>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener los alumnos o carreras: {ex.Message}");
        }
    }
}
